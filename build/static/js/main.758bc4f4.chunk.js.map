{"version":3,"sources":["components/User.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["User","this","props","name","avatar","email","isLoading","userDetails","className","src","alt","style","width","height","loadingMessage","maxWidth","minHeight","React","Component","axios","create","baseURL","responseType","App","state","API","get","params","results","inc","userData","data","first","last","picture","large","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPA4CeA,E,uKApCH,IAAD,EACoCC,KAAKC,MAAxCC,EADD,EACCA,KAAMC,EADP,EACOA,OAAQC,EADf,EACeA,MAAOC,EADtB,EACsBA,UAEvBC,EACJ,6BACE,yBACEC,UAAU,sDACVC,IAAKL,EACLM,IAAKP,EACLQ,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAEnC,wBAAIL,UAAU,QAAQL,GACtB,0BAAMK,UAAU,cAAcH,IAI5BS,EAAiB,0BAAMN,UAAU,iBAAhB,cAEvB,OACE,kBAAC,IAAD,CACEA,UAAU,+CACVG,MAAO,CAAEI,SAAU,QAASC,UAAW,UAEtCV,EAAYQ,EAAiBP,O,GAxBnBU,IAAMC,W,QCLVC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,6BACTC,aAAc,SCgDDC,E,kDA/Cb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAEDsB,MAAQ,CACXlB,WAAW,EACXH,KAAM,KACNC,OAAQ,KACRC,MAAO,MAPQ,E,qDAWT,IAAD,EACoCJ,KAAKuB,MAAxClB,EADD,EACCA,UAAWH,EADZ,EACYA,KAAMC,EADlB,EACkBA,OAAQC,EAD1B,EAC0BA,MAEjC,OACE,kBAAC,EAAD,CAAMC,UAAWA,EAAWH,KAAMA,EAAMC,OAAQA,EAAQC,MAAOA,M,gLAM5CoB,EAAIC,IAAI,IAAK,CAChCC,OAAQ,CACNC,QAAS,EACTC,IAAK,wB,OAKTC,GARIA,E,QAQgBC,KAAKH,QAAQ,GAG3BzB,E,UAAU2B,EAAS3B,KAAK6B,M,YAASF,EAAS3B,KAAK8B,MAC/C7B,EAAS0B,EAASI,QAAQC,MAC1B9B,EAAQyB,EAASzB,MAEvBJ,KAAKmC,SAAL,eACKnC,KAAKuB,MADV,GACoB,CAChBlB,WAAW,EACXH,OACAC,SACAC,W,2GA1CUY,IAAMC,WCQJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.758bc4f4.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Card } from \"shards-react\";\n\nclass User extends React.Component {\n  render() {\n    const { name, avatar, email, isLoading } = this.props;\n\n    const userDetails = (\n      <div>\n        <img\n          className=\"img-thumbnail rounded-circle mx-auto mb-2 shadow-sm\"\n          src={avatar}\n          alt={name}\n          style={{ width: \"100px\", height: \"100px\" }}\n        />\n        <h4 className=\"mb-0\">{name}</h4>\n        <span className=\"text-muted\">{email}</span>\n      </div>\n    );\n\n    const loadingMessage = <span className=\"d-flex m-auto\">Loading...</span>;\n\n    return (\n      <Card\n        className=\"mx-auto mt-4 text-center cards z-depth-3 p-5\"\n        style={{ maxWidth: \"300px\", minHeight: \"250px\" }}\n      >\n        {isLoading ? loadingMessage : userDetails}\n      </Card>\n    );\n  }\n}\n\nUser.propTypes = {\n  name: PropTypes.string,\n  avatar: PropTypes.string,\n  email: PropTypes.string,\n  isLoading: PropTypes.bool\n};\n\nexport default User;","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://randomuser.me/api/\",\n  responseType: \"json\"\n});","import React from \"react\";\nimport User from \"./components/User\"\nimport API from \"./utils/API\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      name: null,\n      avatar: null,\n      email: null\n    };\n  }\n\n  render() {\n    const { isLoading, name, avatar, email } = this.state;\n\n    return (\n      <User isLoading={isLoading} name={name} avatar={avatar} email={email} />\n    );\n  }\n\n  async componentDidMount() {\n    // Load async data.\n    let userData = await API.get('/', {\n      params: {\n        results: 1,\n        inc: 'name,email,picture'\n      }\n    });\n\n        // Parse the results for ease of use.\n    userData = userData.data.results[0];\n\n    // Update state with new data and re-render our component.\n    const name = `${userData.name.first} ${userData.name.last}`;\n    const avatar = userData.picture.large;\n    const email = userData.email;\n\n    this.setState({\n      ...this.state, ...{\n        isLoading: false,\n        name,\n        avatar,\n        email\n      }\n    });\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}